{"version":3,"sources":["components/PokemonSelect.jsx","components/AllPokemon.jsx","components/Pokemon.jsx","containers/PokemonContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["PokemonSelect","props","name","imgurl","number","react_default","a","createElement","className","alt","src","onClick","handleClick","url","charAt","toUpperCase","substr","AllPokemon","pokeNodes","data","map","_ref","index","components_PokemonSelect","key","Pokemon","frontimgurl","id","backimgurl","length","types","type","height","weight","PokemonContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pokemon","selectedPokemonAPI","bind","assertThisInitialized","_this2","request","XMLHttpRequest","open","addEventListener","status","jsonString","responseText","JSON","parse","results","slice","setState","send","event","_this3","window","scroll","console","log","components_Pokemon","components_AllPokemon","React","Component","App","containers_PokemonContainer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2383ae46.chunk.js","sourcesContent":["import React from 'react';\n\nconst PokemonSelect = (props) => {\n  let name = props.name;\n  let imgurl = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/' + props.number + '.png';\n\n  return (\n\n    <button className=\"button\">\n      <img className=\"list-img\"\n        alt={props.name}\n        src={imgurl}\n        onClick={() => { props.handleClick(props.url) }}\n      />\n      <h3>{name.charAt(0).toUpperCase() + name.substr(1)}</h3>\n    </button>\n  )\n\n}\n\nexport default PokemonSelect;","import React from 'react';\nimport PokemonSelect from './PokemonSelect';\n\n\nconst AllPokemon = (props) => {\n\n  const pokeNodes = props.data.map(({ name, url }, index) => {\n    return (\n      <PokemonSelect\n        key={index}\n        number={index + 1}\n        name={name}\n        url={url}\n        handleClick={props.handleClick}\n      />\n    )\n  })\n\n\n  return (\n    <div className=\"flex-container\">\n      {pokeNodes}\n    </div>\n  )\n\n}\n\n\nexport default AllPokemon;","import React from 'react';\n\nconst Pokemon = (props) => {\n  let frontimgurl = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/' + props.data.id + '.png';\n  let backimgurl = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/' + props.data.id + '.png';\n  let name = props.data.name;\n\n  if (props.data.length === 0) {\n    return null;\n  } else {\n    const types = props.data.types.map((type) => {\n      return (\n        <h3>Type: {type.type.name}</h3>\n      )\n    }\n    )\n    return (\n      <div>\n        <h1 className=\"poke-name\">{name.charAt(0).toUpperCase() + name.substr(1)}</h1>\n        <img className=\"image\"\n          alt={props.data.name}\n          src={frontimgurl}\n        />\n        <img className=\"image\"\n          alt={props.data.name}\n          src={backimgurl}\n        />\n        <h3>Height: {props.data.height}in</h3>\n        <h3>Weight: {props.data.weight}lbs</h3>\n        <h3>Pokemon Number: {props.data.id}</h3>\n        {types}\n      </div>\n    )\n  }\n}\n\nexport default Pokemon;","import React from 'react';\nimport AllPokemon from '../components/AllPokemon';\nimport Pokemon from '../components/Pokemon';\n\nclass PokemonContainer extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pokemon: [],\n      selectedPokemonAPI: []\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    const url = 'https://pokeapi.co/api/v2/pokemon/?limit=151';\n    const request = new XMLHttpRequest();\n    request.open('GET', url);\n\n    request.addEventListener(\"load\", () => {\n      if (request.status !== 200) return;\n      const jsonString = request.responseText;\n      const datalimit = JSON.parse(jsonString);\n      const data = datalimit.results.slice(0, 151);\n      this.setState({ pokemon: data })\n    });\n\n    request.send();\n  }\n\n  handleClick(event) {\n    const url = event;\n    const request = new XMLHttpRequest();\n    request.open('GET', url);\n    window.scroll(0, 0);\n\n\n    request.addEventListener(\"load\", () => {\n      if (request.status !== 200) return;\n      const jsonString = request.responseText;\n      const data = JSON.parse(jsonString);\n      this.setState({ selectedPokemonAPI: data })\n      console.log(data);\n    });\n    request.send();\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h1 className=\"title\">Pokemon Library</h1>\n        </div>\n\n        <div className=\"pokemon\">\n          <Pokemon\n            data={this.state.selectedPokemonAPI}\n          />\n        </div>\n\n\n        <div className='grid-view'>\n          <AllPokemon data={this.state.pokemon}\n            handleClick={this.handleClick}\n          />\n        </div>\n\n      </div>\n\n    )\n  }\n}\nexport default PokemonContainer;","import React, {Component} from 'react';\nimport './App.css';\nimport PokemonContainer from './containers/PokemonContainer';\n\nclass App extends Component {\n  render() {\n    return ( <div>\n      <PokemonContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}